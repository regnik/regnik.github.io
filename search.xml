<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>浅谈for-in/of循环遍历</title>
      <link href="2021/06/02/forinof/"/>
      <url>2021/06/02/forinof/</url>
      
        <content type="html"><![CDATA[<p>下面两句是摘抄自 JavaScript高级程序设计 的对 for-in 和 for-of 的定义。</p><blockquote><p>for-in 语句是一种严格的迭代语句，用于枚举对象中的非符号键属性。</p></blockquote><blockquote><p>for-of 语句是一种严格的迭代语句，用于遍历可迭代对象的元素。  </p></blockquote><p>以数组和对象为例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  name: <span class="string">&#x27;regnik&#x27;</span>,</span><br><span class="line">  age: <span class="string">&#x27;23&#x27;</span>,</span><br><span class="line">  sex: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">  <span class="comment">//output:</span></span><br><span class="line">  <span class="comment">//name</span></span><br><span class="line">  <span class="comment">//age</span></span><br><span class="line">  <span class="comment">//sex</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">of</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">  <span class="comment">//TypeError：obj is not iterable</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在对对象进行遍历时，for-in 获取的是对象的属性名，而 for-of 报错，并提示 obj 不是一个可迭代对象。可迭代对象指内部实现了迭代接口的那些类型，在JavaScript中，有：  </p><ul><li>字符串 String</li><li>数组 Array</li><li>映射 Map</li><li>集合 Set</li><li>arguements 对象  </li><li>NodeList 等 DOM 集合类型 </li></ul><p>也就是说，对于上述这些类型，for-of 循环可以遍历得到它们的元素。若是将 for-of 用于上述类型以外的迭代，则会抛出错误。  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">  <span class="comment">//output:</span></span><br><span class="line">  <span class="comment">//0</span></span><br><span class="line">  <span class="comment">//1</span></span><br><span class="line">  <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">  <span class="comment">//output:</span></span><br><span class="line">  <span class="comment">//name</span></span><br><span class="line">  <span class="comment">//age</span></span><br><span class="line">  <span class="comment">//sex</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在对数组进行遍历时，for-in 获取的是数组的索引值，也即数组元素的下标，而for-of 获取的才是数组的真正元素。<br>因此，for-in 多用于遍历对象，而 for-of 多用于遍历数组（以及一众其它可迭代对象）。</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js知识点：for循环嵌套setTimeout()方法</title>
      <link href="2021/05/23/setTimeout/"/>
      <url>2021/05/23/setTimeout/</url>
      
        <content type="html"><![CDATA[<p>先看下面这个栗子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ex1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i);</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ex1();</span><br></pre></td></tr></table></figure><p>代码运行结果是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">4</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>再看这样一个栗子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ex2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i);</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ex2();</span><br></pre></td></tr></table></figure><p>代码运行结果是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>首先明确一个概念，Js是单线程的，这意味着所有任务需要排队执行，只有前一个任务结束，后一个任务才能得到执行。无疑，这种机制在多任务环境下是不友好的，如果前一个任务执行时间过长，那后一个任务不得不陷入无效的等待。因此，JS将任务分为同步任务和异步任务，并用任务队列来保证这一过程。同步任务在主线程上排队执行，并形成一个任务栈。异步任务则不进入主线程，而是进入任务队列，主线程执行完任务栈中的任务才会去执行任务队列中的任务。setTimeout() 方法用于在指定的毫秒后调用函数或计算表达式，它就是一个典型的通过回调函数实现异步的操作。上面两个例子的执行过程应该是这样的：<br>调用函数后，首先进行 for 循环，之后判断条件，满足，进入循环内部，发现 setTimeout() 方法，将其置入任务队列，继续循环。当循环条件不满足时，循环退出，这时执行任务队列，回调函数，打印变量值。不同的是，例一中，变量已被全局修改，回调函数打印的变量值为循环退出时最终的变量值；而例二中，由于每次 for 循环有独立作用域的变量，在插入消息队列时，同时维护着这个独立作用域上的变量，因此回调函数打印的就是每次循环判断时的变量值，同样也是我们所预期的值。</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指offer题解Js版（持续更新）</title>
      <link href="2021/05/18/JZoffer/"/>
      <url>2021/05/18/JZoffer/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  这里是记录我用js刷题的。</p><h1 id="剑指offer-03-数组中重复的数字"><a href="#剑指offer-03-数组中重复的数字" class="headerlink" title="剑指offer 03.数组中重复的数字"></a>剑指offer 03.数组中重复的数字</h1><h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><p>找出数组中重复的数字。<br>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><h5 id="解法一-哈希表"><a href="#解法一-哈希表" class="headerlink" title="解法一  哈希表"></a>解法一  哈希表</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> findRepeatNumber = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> mymap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> nums)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mymap.has(i)) <span class="keyword">return</span> i;</span><br><span class="line">        mymap.set(i,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;  </span><br></pre></td></tr></table></figure><h5 id="解法二-原地交换"><a href="#解法二-原地交换" class="headerlink" title="解法二  原地交换"></a>解法二  原地交换</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> findRepeatNumber = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> copy = nums.slice();</span><br><span class="line">    <span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;copy.length&gt;&#123;</span><br><span class="line">        <span class="keyword">if</span>(copy[i] == i)&#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(copy[copy[i]] == copy[i])<span class="keyword">return</span> copy[i];</span><br><span class="line">        [copy[copy[i]],copy[i]] = [copy[i],copy[copy[i]]];<span class="comment">//解构赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="剑指offer-04-二维数组中的查找"><a href="#剑指offer-04-二维数组中的查找" class="headerlink" title="剑指offer 04.二维数组中的查找"></a>剑指offer 04.二维数组中的查找</h1><h3 id="题目：-1"><a href="#题目：-1" class="headerlink" title="题目："></a>题目：</h3><p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。  </p><h5 id="解法一-暴力查找"><a href="#解法一-暴力查找" class="headerlink" title="解法一 暴力查找"></a>解法一 暴力查找</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> findNumberIn2DArray = <span class="function"><span class="keyword">function</span>(<span class="params">matrix, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(matrix == <span class="literal">null</span> || matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; matrix.length; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>; j &lt; matrix[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(matrix[i][j] == target) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="解法二-线性查找"><a href="#解法二-线性查找" class="headerlink" title="解法二 线性查找"></a>解法二 线性查找</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> findNumberIn2DArray = <span class="function"><span class="keyword">function</span>(<span class="params">matrix, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> n = matrix.length;</span><br><span class="line">    <span class="keyword">if</span>(matrix == <span class="literal">null</span> || n == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">const</span> m = matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">if</span>(target &gt; matrix[n-<span class="number">1</span>][m-<span class="number">1</span>] || target &lt; matrix[<span class="number">0</span>][<span class="number">0</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>, j = m-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; n &amp;&amp; j &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix[i][j] &gt; target) j--;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(matrix[i][j] &lt; target) i++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="剑指offer-05-替换空格"><a href="#剑指offer-05-替换空格" class="headerlink" title="剑指offer 05.替换空格"></a>剑指offer 05.替换空格</h1><h3 id="题目：-2"><a href="#题目：-2" class="headerlink" title="题目："></a>题目：</h3><p>请实现一个函数，把字符串 s 中的每个空格替换成”%20”。</p><h5 id="解法一-遍历修改"><a href="#解法一-遍历修改" class="headerlink" title="解法一 遍历修改"></a>解法一 遍历修改</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> replaceSpace = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> k <span class="keyword">of</span> s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">            res.push(<span class="string">&#x27;%&#x27;</span>);</span><br><span class="line">            res.push(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">            res.push(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            res.push(k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="解法二-正则匹配"><a href="#解法二-正则匹配" class="headerlink" title="解法二 正则匹配"></a>解法二 正则匹配</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> replaceSpace = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.replace(<span class="regexp">/\s/g</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="剑指offer-06-从尾到头打印链表"><a href="#剑指offer-06-从尾到头打印链表" class="headerlink" title="剑指offer 06.从尾到头打印链表"></a>剑指offer 06.从尾到头打印链表</h1><h3 id="题目：-3"><a href="#题目：-3" class="headerlink" title="题目："></a>题目：</h3><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p><h5 id="解法一-数组前插"><a href="#解法一-数组前插" class="headerlink" title="解法一 数组前插"></a>解法一 数组前插</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reversePrint = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">let</span> p = head;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        res.unshift(p.val);</span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><h5 id="解法二-模拟栈"><a href="#解法二-模拟栈" class="headerlink" title="解法二 模拟栈"></a>解法二 模拟栈</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reversePrint = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> stack = [];</span><br><span class="line">    <span class="keyword">let</span> p = head;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        stack.push(p.val);</span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.reverse();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="剑指offer-07-重建二叉树"><a href="#剑指offer-07-重建二叉树" class="headerlink" title="剑指offer 07.重建二叉树"></a>剑指offer 07.重建二叉树</h1><h3 id="题目：-4"><a href="#题目：-4" class="headerlink" title="题目："></a>题目：</h3><p>输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p><h5 id="解法一-递归"><a href="#解法一-递归" class="headerlink" title="解法一 递归"></a>解法一 递归</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buildTree = <span class="function"><span class="keyword">function</span>(<span class="params">preorder, inorder</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preorder.length) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">const</span> cur = <span class="keyword">new</span> TreeNode(preorder[<span class="number">0</span>]);<span class="comment">//以前序第一个节点值作为树的根节点值</span></span><br><span class="line">    <span class="keyword">const</span> index = inorder.indexOf(preorder[<span class="number">0</span>]);<span class="comment">//获取根节点在中序遍历中的索引以确定左右子树节点个数</span></span><br><span class="line">    cur.left = buildTree(preorder.slice(<span class="number">1</span>,index+<span class="number">1</span>),inorder.slice(<span class="number">0</span>,index));<span class="comment">//递归构建左子树</span></span><br><span class="line">    cur.right = buildTree(preorder.slice(index+<span class="number">1</span>),inorder.slice(index+<span class="number">1</span>));<span class="comment">//递归构建右子树</span></span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="解法二-迭代"><a href="#解法二-迭代" class="headerlink" title="解法二 迭代"></a>解法二 迭代</h5><p>emm <del>太复杂了没必要用</del>（等我看懂再来写</p><h1 id="剑指offer-08-用两个栈实现队列"><a href="#剑指offer-08-用两个栈实现队列" class="headerlink" title="剑指offer 08.用两个栈实现队列"></a>剑指offer 08.用两个栈实现队列</h1><h3 id="题目：-5"><a href="#题目：-5" class="headerlink" title="题目："></a>题目：</h3><p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )</p><h5 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CQueue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> stack1 = [];</span><br><span class="line">    <span class="keyword">let</span> stack2 = [];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">value</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">CQueue.prototype.appendTail = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.stack1.push(value);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">CQueue.prototype.deleteHead = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">this</span>.stack2.length)&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">this</span>.stack1.length)&#123;</span><br><span class="line">            <span class="built_in">this</span>.stack2.push(<span class="built_in">this</span>.stack1.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.stack2.pop() || -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your CQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new CQueue()</span></span><br><span class="line"><span class="comment"> * obj.appendTail(value)</span></span><br><span class="line"><span class="comment"> * var param_2 = obj.deleteHead()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h1 id="剑指offer-10I-斐波那契数列"><a href="#剑指offer-10I-斐波那契数列" class="headerlink" title="剑指offer 10I.斐波那契数列"></a>剑指offer 10I.斐波那契数列</h1><h3 id="题目：-6"><a href="#题目：-6" class="headerlink" title="题目："></a>题目：</h3><p>写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项（即 F(N)）。斐波那契数列的定义如下：</p><blockquote><p>F(0) = 0,   F(1) = 1<br>F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.</p></blockquote><p>斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。<br>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p><h5 id="解法一-优化动规"><a href="#解法一-优化动规" class="headerlink" title="解法一 优化动规"></a>解法一 优化动规</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fib = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">0</span>, b = <span class="number">1</span>, sum;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        sum = (a + b) % <span class="number">1000000007</span>;</span><br><span class="line">        a = b;</span><br><span class="line">        b = sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="剑指offer-10II-青蛙跳台阶"><a href="#剑指offer-10II-青蛙跳台阶" class="headerlink" title="剑指offer 10II.青蛙跳台阶"></a>剑指offer 10II.青蛙跳台阶</h1><h3 id="题目：-7"><a href="#题目：-7" class="headerlink" title="题目："></a>题目：</h3><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。<br>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p><h5 id="解法-同上"><a href="#解法-同上" class="headerlink" title="解法 同上"></a>解法 同上</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fib = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>, b = <span class="number">1</span>, sum;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        sum = (a + b) % <span class="number">1000000007</span>;</span><br><span class="line">        a = b;</span><br><span class="line">        b = sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="剑指offer-11-旋转数组的最小数字"><a href="#剑指offer-11-旋转数组的最小数字" class="headerlink" title="剑指offer 11.旋转数组的最小数字"></a>剑指offer 11.旋转数组的最小数字</h1><h3 id="题目：-8"><a href="#题目：-8" class="headerlink" title="题目："></a>题目：</h3><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一个旋转，该数组的最小值为1。 </p><h5 id="解法一-二分查找"><a href="#解法一-二分查找" class="headerlink" title="解法一 二分查找"></a>解法一 二分查找</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最小值右边的元素一定小于右边界，左边一定大于右边界</span></span><br><span class="line"><span class="keyword">var</span> minArray = <span class="function"><span class="keyword">function</span>(<span class="params">numbers</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> low=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> high=numbers.length;</span><br><span class="line">        <span class="keyword">while</span>(low&lt;high)&#123;</span><br><span class="line">            <span class="keyword">let</span> mid=low+<span class="built_in">Math</span>.floor((high-low)/<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span>(numbers[mid]&lt;numbers[high])&#123;</span><br><span class="line">                high=mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(numbers[mid]&gt;numbers[high])&#123;</span><br><span class="line">                low=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                high-=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numbers[low];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="剑指offer-12-矩阵中的路径"><a href="#剑指offer-12-矩阵中的路径" class="headerlink" title="剑指offer 12.矩阵中的路径"></a>剑指offer 12.矩阵中的路径</h1><h3 id="题目：-9"><a href="#题目：-9" class="headerlink" title="题目："></a>题目：</h3><p>给定一个 m x n 二维字符网格 board 和一个字符串单词 word 。如果 word 存在于网格中，返回 true ；否则，返回 false 。</p><p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p><h5 id="解法一-深度优先遍历"><a href="#解法一-深度优先遍历" class="headerlink" title="解法一 深度优先遍历"></a>解法一 深度优先遍历</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> exist = <span class="function"><span class="keyword">function</span>(<span class="params">board, word</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> m=board.length;</span><br><span class="line">    <span class="keyword">const</span> n=board[<span class="number">0</span>].length;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">board,i,j,k</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span>||i&gt;=m||j&lt;<span class="number">0</span>||j&gt;=n||board[i][j]!=word[k])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(k===word.length-<span class="number">1</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">let</span> char=board[i][j];</span><br><span class="line">        board[i][j]=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">let</span> res=dfs(board,i-<span class="number">1</span>,j,k+<span class="number">1</span>)||dfs(board,i+<span class="number">1</span>,j,k+<span class="number">1</span>)||dfs(board,i,j-<span class="number">1</span>,k+<span class="number">1</span>)||dfs(board,i,j+<span class="number">1</span>,k+<span class="number">1</span>);</span><br><span class="line">        board[i][j]=char;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">let</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dfs(board,i,j,<span class="number">0</span>))<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;   </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="剑指offer-13-机器人的运动范围"><a href="#剑指offer-13-机器人的运动范围" class="headerlink" title="剑指offer 13.机器人的运动范围"></a>剑指offer 13.机器人的运动范围</h1><h3 id="题目：-10"><a href="#题目：-10" class="headerlink" title="题目："></a>题目：</h3><p>地上有一个m行n列的方格，从坐标 [0,0] 到坐标 [m-1,n-1] 。一个机器人从坐标 [0, 0] 的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7=18。但它不能进入方格 [35, 38]，因为3+5+3+8=19。请问该机器人能够到达多少个格子？</p><h5 id="解法一-深度递归遍历"><a href="#解法一-深度递归遍历" class="headerlink" title="解法一 深度递归遍历"></a>解法一 深度递归遍历</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> movingCount = <span class="function"><span class="keyword">function</span>(<span class="params">m, n, k</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//辅助访问标志数组</span></span><br><span class="line">    <span class="keyword">let</span> visited=<span class="keyword">new</span> <span class="built_in">Array</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        visited[i] = <span class="keyword">new</span> <span class="built_in">Array</span>(n).fill(<span class="literal">false</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">let</span> sum=<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> ans=<span class="number">0</span>;</span><br><span class="line">        x+=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">of</span> x)&#123;</span><br><span class="line">            ans+=<span class="built_in">parseInt</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> dfs = <span class="function"><span class="keyword">function</span>(<span class="params">i, j</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == m || i &lt; <span class="number">0</span> || j == n || j &lt; <span class="number">0</span> || visited[i][j] || sum(i)+sum(j) &gt; k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        visited[i][j] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> dfs(i + <span class="number">1</span>, j) + dfs(i - <span class="number">1</span>, j) + dfs(i, j + <span class="number">1</span>) + dfs(i, j - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dfs(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><h1 id="剑指offer-14-I-剪绳子"><a href="#剑指offer-14-I-剪绳子" class="headerlink" title="剑指offer 14-I.剪绳子"></a>剑指offer 14-I.剪绳子</h1><h3 id="题目：-11"><a href="#题目：-11" class="headerlink" title="题目："></a>题目：</h3><p>给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n&gt;1并且m&gt;1），每段绳子的长度记为 k[0],k[1]…k[m-1] 。请问 k[0]<em>k[1]</em>…*k[m-1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。</p><h5 id="解法一-数学推导"><a href="#解法一-数学推导" class="headerlink" title="解法一 数学推导"></a>解法一 数学推导</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cuttingRope = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">3</span>)<span class="keyword">return</span> n-<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//n=3a+b;</span></span><br><span class="line">    <span class="keyword">let</span> a=<span class="built_in">Math</span>.floor(n/<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">let</span> b=n%<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span>(b===<span class="number">0</span>)<span class="keyword">return</span> <span class="built_in">Math</span>.pow(<span class="number">3</span>,a);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(b===<span class="number">1</span>)<span class="keyword">return</span> <span class="built_in">Math</span>.pow(<span class="number">3</span>,a-<span class="number">1</span>)*<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">Math</span>.pow(<span class="number">3</span>,a)*<span class="number">2</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="剑指offer-14-II-剪绳子"><a href="#剑指offer-14-II-剪绳子" class="headerlink" title="剑指offer 14-II. 剪绳子"></a>剑指offer 14-II. 剪绳子</h1><h3 id="题目：-12"><a href="#题目：-12" class="headerlink" title="题目："></a>题目：</h3><p>给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n&gt;1并且m&gt;1），每段绳子的长度记为 k[0],k[1]…k[m - 1] 。请问 k[0]<em>k[1]</em>…*k[m - 1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。</p><p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p><h5 id="解法一-数学推导-1"><a href="#解法一-数学推导-1" class="headerlink" title="解法一 数学推导"></a>解法一 数学推导</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cuttingRope = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//n=3*a+b</span></span><br><span class="line">    <span class="keyword">let</span> a=<span class="built_in">Math</span>.floor(n/<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">let</span> b=n%<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span>(n===<span class="number">2</span>||n===<span class="number">3</span>)<span class="keyword">return</span> n-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(b===<span class="number">0</span>)&#123;<span class="comment">//3^a</span></span><br><span class="line">        <span class="keyword">let</span> res=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;a;i++)&#123;</span><br><span class="line">            res=res*<span class="number">3</span>%<span class="number">1000000007</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(b===<span class="number">1</span>)&#123;<span class="comment">//4*3^a-1</span></span><br><span class="line">        <span class="keyword">let</span> res=<span class="number">4</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;a-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            res=res*<span class="number">3</span>%<span class="number">1000000007</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(b===<span class="number">2</span>)&#123;<span class="comment">//2*3^a</span></span><br><span class="line">        <span class="keyword">let</span> res=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;a;i++)&#123;</span><br><span class="line">            res=res*<span class="number">3</span>%<span class="number">1000000007</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="剑指offer-15-二进制中1的个数"><a href="#剑指offer-15-二进制中1的个数" class="headerlink" title="剑指offer 15.二进制中1的个数"></a>剑指offer 15.二进制中1的个数</h1><h3 id="题目：-13"><a href="#题目：-13" class="headerlink" title="题目："></a>题目：</h3><p>请实现一个函数，输入一个整数（以二进制串形式），输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。</p><h5 id="解法一-依次消1"><a href="#解法一-依次消1" class="headerlink" title="解法一 依次消1"></a>解法一 依次消1</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hammingWeight = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        ans++; </span><br><span class="line">        <span class="comment">//消去右边的1</span></span><br><span class="line">        n&amp;=(n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="解法二-API"><a href="#解法二-API" class="headerlink" title="解法二 API"></a>解法二 API</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hammingWeight = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n.toString(<span class="number">2</span>).split(<span class="string">&quot;1&quot;</span>).length-<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="剑指offer-16-数值的整数次方"><a href="#剑指offer-16-数值的整数次方" class="headerlink" title="剑指offer 16.数值的整数次方"></a>剑指offer 16.数值的整数次方</h1><h3 id="题目：-14"><a href="#题目：-14" class="headerlink" title="题目："></a>题目：</h3><p>实现 pow(x, n) ，即计算 x 的 n 次幂函数（即，xn）。不得使用库函数，同时不需要考虑大数问题。</p><h5 id="解法一-快速幂"><a href="#解法一-快速幂" class="headerlink" title="解法一 快速幂"></a>解法一 快速幂</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myPow = <span class="function"><span class="keyword">function</span>(<span class="params">x, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res=<span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n===<span class="number">0</span>)<span class="keyword">return</span> res;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        x=<span class="number">1</span>/x;</span><br><span class="line">        n=-n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)&#123;</span><br><span class="line">            res*=x; </span><br><span class="line">        &#125;</span><br><span class="line">        x*=x;  </span><br><span class="line">        n&gt;&gt;&gt;=<span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="剑指offer-17-打印从1到最大的n位数"><a href="#剑指offer-17-打印从1到最大的n位数" class="headerlink" title="剑指offer 17.打印从1到最大的n位数"></a>剑指offer 17.打印从1到最大的n位数</h1><h3 id="题目：-15"><a href="#题目：-15" class="headerlink" title="题目："></a>题目：</h3><p>输入数字 n，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。</p><h5 id="解法一-遍历生成"><a href="#解法一-遍历生成" class="headerlink" title="解法一 遍历生成"></a>解法一 遍历生成</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> printNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;<span class="built_in">Math</span>.pow(<span class="number">10</span>,n);i++)&#123;</span><br><span class="line">        arr.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="剑指offer-18-删除链表的节点"><a href="#剑指offer-18-删除链表的节点" class="headerlink" title="剑指offer 18.删除链表的节点"></a>剑指offer 18.删除链表的节点</h1><h3 id="题目：-16"><a href="#题目：-16" class="headerlink" title="题目："></a>题目：</h3><p>给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。</p><p>返回删除后的链表的头节点。</p><h5 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> deleteNode = <span class="function"><span class="keyword">function</span>(<span class="params">head, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> p=head;</span><br><span class="line">    <span class="keyword">let</span> prior=<span class="keyword">new</span> ListNode(head);<span class="comment">//前驱指针</span></span><br><span class="line">    prior.next=head;</span><br><span class="line">    <span class="keyword">if</span>(head.val===val)<span class="keyword">return</span> head.next;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p.val===val)&#123;</span><br><span class="line">            prior.next=p.next;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p=p.next;</span><br><span class="line">            prior=prior.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="剑指offer"><a href="#剑指offer" class="headerlink" title="剑指offer"></a>剑指offer</h1>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
